@page "/"
@using Grpc.Net.Client
@using System.Reactive.Linq
@using System.Reactive
@using asagiv.pushrocket.common.Models
@using asagiv.pushrocket.ui.common.ViewModels
@inject MainViewModel ViewModel
@inject IMessageService MessageService

<Div>

    <Div class="d-flex align-items-stretch">

        <Div class="form-floating flex-grow-1" Margin="Margin.Is2">

            <TextEdit InputMode="TextInputMode.Url" Background="Background.Light" TextColor="TextColor.Dark"
                      Class="form-control" id="floatingInput" @bind-Text="@ViewModel.ConnectionString" placeholder=" " />

            <FieldLabel For="floatingInput">Connection String</FieldLabel>

        </Div>

        <Button Color="Color.Primary" Margin="Margin.Is2" Clicked="@(x => ViewModel.ConnectCommand.Execute(null))">Connect</Button>

    </Div>

    @if (ViewModel.IsConnected)
    {
        <Div Class="d-flex align-items-stretch" Margin="Margin.Is2">

            <Select TValue="string" @bind-SelectedValue="@ViewModel.SelectedDestinationNode">

                @foreach(var destinationNode in ViewModel.DestinationNodes)
                {
                    <SelectItem Value="@destinationNode">@destinationNode</SelectItem>
                }

            </Select>

        </Div>

        <Div Class="d-flex align-items-stretch">

            <Button Color="Color.Primary" Margin="Margin.Is2" Clicked="@(x => ViewModel.PushFilesCommand.Execute(null))" Block>Select Files</Button>

        </Div>
    }
    else
    {
        <Div Class="d-flex align-items-center">
            <Text TextAlignment="TextAlignment.Center">
                Please connect to a PushRocket server.
            </Text>
        </Div>
    }

</Div>

@code
{
    private Snackbar _snackbar;

    protected override void OnInitialized()
    {
        ViewModel.ErrorObservable
            .SelectMany(ShowErrorNotifier)
            .Subscribe();

        ViewModel.PropertyChanged += async (s, e) => await InvokeAsync(() => this.StateHasChanged());

        base.OnInitialized();
    }

    private async Task<Unit> ShowErrorNotifier(string errorMessage)
    {
        await MessageService.Error(errorMessage, "Error");

        return Unit.Default;
    }
}