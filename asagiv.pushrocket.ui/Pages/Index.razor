@page "/"
@using Grpc.Net.Client
@using System.Reactive.Linq
@using System.Reactive
@using asagiv.pushrocket.common.Models
@using asagiv.pushrocket.ui.ViewModels
@using MudBlazor
@inject MainViewModel ViewModel
@inject IDialogService DialogService

<div>

    <MudSelect Class="m-3" T="string" Label="Server" Variant="Variant.Outlined"
               @bind-Value="@ViewModel.SelectedConnectionSettingString"
               AnchorOrigin="Origin.BottomCenter">
        @foreach (var connectionSetting in ViewModel.ConnectionSettingsList)
        {
            <MudSelectItem Value="@connectionSetting.ConnectionName">@connectionSetting.ConnectionName</MudSelectItem>
        }
    </MudSelect>

    @if (ViewModel.IsConnected)
    {
        <MudSelect Class="m-3" Label="Send To" T="string" Variant="Variant.Outlined"
               @bind-Value="@ViewModel.SelectedDestinationNode"
               AnchorOrigin="Origin.BottomCenter">
            @foreach (var destinationNode in ViewModel.DestinationNodes)
            {
                <MudSelectItem Value="@destinationNode">
                    @destinationNode
                </MudSelectItem>
            }
        </MudSelect>
    }

    @if (!string.IsNullOrWhiteSpace(ViewModel.SelectedDestinationNode))
    {
        <div class="d-flex">
            <MudButton Class="m-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(x => ViewModel.PushFilesCommand.Execute(null))"
                   FullWidth="true">
                Select Files
            </MudButton>
        </div>
    }

    @foreach (var context in ViewModel.PushContexts.Reverse())
    {
        <MudPaper Elevation="2" Class="m-3 p-3" Outlined="true">

            <div class="d-flex justify-content-between align-items-center">

                <MudText>@context.Name</MudText>

                <div Class="d-flex justify-content-right align-items-center">

                    @switch (context.Status)
                    {
                        case DeliveryStatus.Pending:
                            <MudIcon Icon="@Icons.Material.Filled.HourglassEmpty" Color="Color.Primary" />
                            break;
                        case DeliveryStatus.InProgress:
                            <MudProgressCircular Max="@context.TotalNumberOfBlocks"
                                     Style="height:20px;width:20px;"
                                     Color="Color.Primary"
                                     Value="@context.NumberOfBlocksPushed" />
                            break;
                        case DeliveryStatus.Successful:
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                            break;
                        default:
                            <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                            break;
                    }

                    <MudIcon Icon="@Icons.Material.Filled.Close" Style="cursor:pointer"
                         @onclick="(_ => ViewModel.RemoveContext(context))"
                         Color="Color.Default" />

                </div>

            </div>

        </MudPaper>
    }

</div>

<div style="height:100px">
</div>

@code
{
    protected override async Task OnInitializedAsync()
    {
        ViewModel.ErrorObservable.Subscribe(ShowErrorNotifier);

        ViewModel.PropertyChanged += async (s, e) => 
        {
            await InvokeAsync(() => this.StateHasChanged());
        };

        ViewModel.PushContexts.CollectionChanged += async (s, e) =>
        {
            await InvokeAsync(() => this.StateHasChanged());

            var newItems = e.NewItems?.OfType<DataPushContext>();

            if (newItems == null)
            {
                return;
            }

            foreach (var newItem in newItems)
            {
                newItem.PropertyChanged += async (t, f) => await InvokeAsync(() => this.StateHasChanged());
            }
        };

        await ViewModel.InitializeAsync();

        await base.OnInitializedAsync();
    }

    private void ShowErrorNotifier(string errorMessage)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        DialogService.ShowMessageBox("Error", errorMessage);
    }
}