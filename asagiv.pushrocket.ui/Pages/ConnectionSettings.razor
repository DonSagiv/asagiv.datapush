@page "/ConnectionSettings"
@using asagiv.pushrocket.common.Models
@using asagiv.pushrocket.ui.common.ViewModels
@inject ConnectionSettingsViewModel ViewModel

<Div>

    <Div Class="form-floating flex-grow-1" Margin="Margin.Is2">

        <Select Class="form-select" TValue="uint" @bind-SelectedValue="@ViewModel.SelectedConnectionSettingsIndex" id="floatingInput">
            <SelectItem TValue="uint" Value="uint.MaxValue">Select a Connection Setting</SelectItem>
            @foreach (var connectionSetting in ViewModel.ConnectionSettingsList)
            {
                <SelectItem TValue="uint" Value="@connectionSetting.Id">@connectionSetting.ConnectionName</SelectItem>
            }
        </Select>

        <FieldLabel for="floatingSelect">Connection</FieldLabel>

    </Div>

    <Div Class="d-flex justify-content-center">
        <Button Color="Color.Primary" Margin="Margin.Is2"
                Clicked="() => ViewModel.NewConnectionSettingsCommand.Execute(null)"
                Block>
            Add
        </Button>
        <Button Color="Color.Primary" Margin="Margin.Is2"
                Clicked="() => ViewModel.SaveConnectionSettingsCommand.Execute(null)"
                Block>
            Save All
        </Button>
    </Div>

    @if (ViewModel.SelectedConnectionSettings != null)
    {
        <Div class="form-floating flex-grow-1" Margin="Margin.Is2">

            <TextEdit InputMode="TextInputMode.Text"
                  Class="form-control"
                  @bind-Text="ViewModel.SelectedConnectionSettings.ConnectionName"
                  id="floatingInput"
                  placeholder=" " />

            <FieldLabel For="floatingInput">Connection Name</FieldLabel>

        </Div>

        <Div class="form-floating flex-grow-1" Margin="Margin.Is2">

            <TextEdit InputMode="TextInputMode.Url"
                  Class="form-control"
                  @bind-Text="ViewModel.SelectedConnectionSettings.ConnectionString"
                  id="floatingInput"
                  placeholder=" " />

            <FieldLabel For="floatingInput">Connection URL</FieldLabel>

        </Div>

        <Div class="form-floating flex-grow-1" Margin="Margin.Is2">

            <TextEdit InputMode="TextInputMode.Text"
                  Class="form-control"
                  @bind-Text="ViewModel.SelectedConnectionSettings.NodeName"
                  id="floatingInput"
                  placeholder=" " />

            <FieldLabel For="floatingInput">Connection Node Name</FieldLabel>

        </Div>

        <Div Margin="Margin.Is2">

            <Button Color="Color.Primary"
                Clicked="() => ViewModel.DeleteConnectionSettingsCommand.Execute(null)"
                Block>
                Delete
            </Button>

        </Div>
    }

</Div>

@code {
    protected override async Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += async (s, e) => await InvokeAsync(() => this.StateHasChanged());

        await ViewModel.InitializeAsync();

        await base.OnInitializedAsync();
    }
}
